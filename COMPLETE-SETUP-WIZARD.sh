#!/bin/bash

# ========================================
# DDN AI System - Complete Setup Wizard
# ========================================

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo ""
echo "========================================"
echo "  DDN AI SYSTEM - COMPLETE SETUP"
echo "========================================"
echo ""
echo "This wizard will help you:"
echo " 1. Configure environment variables"
echo " 2. Test MongoDB Atlas connection"
echo " 3. Start all Docker services"
echo " 4. Import n8n workflows"
echo " 5. Test the complete system"
echo ""
echo "========================================"
echo ""

# Check prerequisites
echo -e "${BLUE}[STEP 1/6] Checking prerequisites...${NC}"
echo ""

# Check Docker
if ! command -v docker &> /dev/null; then
    echo -e "${RED}[X] Docker not found!${NC}"
    echo "Please install Docker from: https://www.docker.com/products/docker-desktop"
    exit 1
fi
echo -e "${GREEN}[OK] Docker installed${NC}"

# Check Docker Compose
if command -v docker-compose &> /dev/null; then
    DOCKER_COMPOSE="docker-compose"
elif docker compose version &> /dev/null; then
    DOCKER_COMPOSE="docker compose"
else
    echo -e "${RED}[X] Docker Compose not found!${NC}"
    exit 1
fi
echo -e "${GREEN}[OK] Docker Compose available${NC}"

# Check Python
if command -v python3 &> /dev/null; then
    PYTHON="python3"
    echo -e "${GREEN}[OK] Python installed${NC}"
elif command -v python &> /dev/null; then
    PYTHON="python"
    echo -e "${GREEN}[OK] Python installed${NC}"
else
    echo -e "${YELLOW}[!] Python not found - Some features may not work${NC}"
    PYTHON=""
fi

# Check Git
if command -v git &> /dev/null; then
    echo -e "${GREEN}[OK] Git installed${NC}"
else
    echo -e "${YELLOW}[!] Git not found - GitHub features disabled${NC}"
fi

echo ""
read -p "Press Enter to continue..."

# Configure Environment
echo ""
echo "========================================"
echo -e "${BLUE}[STEP 2/6] Environment Configuration${NC}"
echo "========================================"
echo ""

if [ -f .env ]; then
    echo ".env file already exists."
    echo ""
    read -p "Do you want to reconfigure it? (y/n): " reconfigure
    if [ "$reconfigure" != "y" ] && [ "$reconfigure" != "Y" ]; then
        echo "Using existing .env file"
    else
        rm .env
        . ./configure_env.sh
    fi
else
    # Create .env file
    echo ""
    echo "Creating .env file..."
    echo ""
    echo "Please provide the following information:"
    echo "(Press Enter to skip optional items)"
    echo ""

    # MongoDB Atlas
    echo "--- MongoDB Atlas Configuration ---"
    read -p "MongoDB Atlas Connection String: " MONGODB_URI
    if [ -z "$MONGODB_URI" ]; then
        echo "Using local MongoDB (will start with Docker)"
        MONGODB_URI="mongodb://admin:password@mongodb:27017/"
    fi

    # Anthropic API Key
    echo ""
    echo "--- AI API Keys (Required) ---"
    read -p "Anthropic API Key (from console.anthropic.com): " ANTHROPIC_API_KEY
    if [ -z "$ANTHROPIC_API_KEY" ]; then
        echo -e "${YELLOW}WARNING: Anthropic API key is required for AI analysis!${NC}"
    fi

    # OpenAI API Key
    read -p "OpenAI API Key (from platform.openai.com): " OPENAI_API_KEY
    if [ -z "$OPENAI_API_KEY" ]; then
        echo -e "${YELLOW}WARNING: OpenAI API key is required for embeddings!${NC}"
    fi

    # Pinecone API Key
    read -p "Pinecone API Key (from pinecone.io): " PINECONE_API_KEY
    if [ -z "$PINECONE_API_KEY" ]; then
        echo -e "${YELLOW}WARNING: Pinecone API key is required for RAG!${NC}"
    fi

    # GitHub Token (Optional)
    echo ""
    echo "--- GitHub Integration (Optional) ---"
    read -p "GitHub Personal Access Token: " GITHUB_TOKEN
    read -p "GitHub Repository (e.g., username/repo): " GITHUB_REPO

    # Create .env file
    echo ""
    echo "Creating .env file..."
    cat > .env <<EOF
# DDN AI Test Failure Analysis System - Environment Variables
# Generated by Setup Wizard on $(date)

# ===================== MongoDB Configuration =====================
MONGODB_URI=${MONGODB_URI}
MONGODB_DB=jenkins_failure_analysis

# ===================== AI & ML APIs =====================
ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
OPENAI_API_KEY=${OPENAI_API_KEY}
PINECONE_API_KEY=${PINECONE_API_KEY}
PINECONE_INDEX_NAME=test-failures

# ===================== GitHub =====================
GITHUB_TOKEN=${GITHUB_TOKEN}
GITHUB_REPO=${GITHUB_REPO}

# ===================== Jenkins =====================
JENKINS_URL=http://localhost:8080
JENKINS_USER=admin
JENKINS_TOKEN=

# ===================== Self-Healing =====================
SELF_HEALING_SAFE_MODE=true
MIN_SUCCESS_RATE=0.8
MIN_PATTERN_OCCURRENCES=3
EOF

    echo -e "${GREEN}[OK] .env file created!${NC}"
    echo ""
fi

# Test MongoDB
echo ""
echo "========================================"
echo -e "${BLUE}[STEP 3/6] Testing MongoDB Connection${NC}"
echo "========================================"
echo ""

if [ -f test-mongodb-atlas.py ] && [ ! -z "$PYTHON" ]; then
    if [ "$MONGODB_URI" != "mongodb://admin:password@mongodb:27017/" ]; then
        echo "Testing MongoDB Atlas connection..."
        $PYTHON test-mongodb-atlas.py || {
            echo ""
            echo -e "${YELLOW}[!] MongoDB Atlas connection failed${NC}"
            echo "You can continue with local MongoDB or fix the connection"
            echo ""
            read -p "Continue anyway? (y/n): " continue_anyway
            if [ "$continue_anyway" != "y" ] && [ "$continue_anyway" != "Y" ]; then
                exit 1
            fi
        }
    else
        echo "Using local MongoDB (will start with Docker)"
    fi
else
    echo -e "${YELLOW}[!] MongoDB test script not found${NC}"
fi

echo ""
read -p "Press Enter to continue..."

# Stop existing services
echo ""
echo "========================================"
echo -e "${BLUE}[STEP 4/6] Preparing Docker Services${NC}"
echo "========================================"
echo ""

echo "Stopping any existing services..."
$DOCKER_COMPOSE down &> /dev/null || true
echo -e "${GREEN}[OK] Cleaned up${NC}"

echo ""
echo "Building Docker images..."
$DOCKER_COMPOSE build
echo -e "${GREEN}[OK] Images built${NC}"

echo ""
read -p "Press Enter to continue..."

# Start services
echo ""
echo "========================================"
echo -e "${BLUE}[STEP 5/6] Starting All Services${NC}"
echo "========================================"
echo ""

echo "Starting Docker Compose services..."
echo "This may take 3-5 minutes..."
echo ""

$DOCKER_COMPOSE up -d

echo -e "${GREEN}[OK] Services started${NC}"
echo ""

echo "Waiting for services to initialize (30 seconds)..."
sleep 30

# Health checks
echo ""
echo "Performing health checks..."
echo ""

if curl -s http://localhost:3000 > /dev/null 2>&1; then
    echo -e "${GREEN}[OK] Dashboard UI running on http://localhost:3000${NC}"
else
    echo -e "${YELLOW}[!] Dashboard UI not responding${NC}"
fi

if curl -s http://localhost:5005/health > /dev/null 2>&1; then
    echo -e "${GREEN}[OK] Dashboard API running on http://localhost:5005${NC}"
else
    echo -e "${YELLOW}[!] Dashboard API not responding${NC}"
fi

if curl -s http://localhost:5678 > /dev/null 2>&1; then
    echo -e "${GREEN}[OK] n8n running on http://localhost:5678${NC}"
else
    echo -e "${YELLOW}[!] n8n not responding${NC}"
fi

echo ""
read -p "Press Enter to continue..."

# Final steps
echo ""
echo "========================================"
echo -e "${GREEN}[STEP 6/6] System Ready!${NC}"
echo "========================================"
echo ""
echo "Your DDN AI System is now running!"
echo ""
echo "Access Points:"
echo " - Dashboard UI:  http://localhost:3000"
echo " - n8n Workflows: http://localhost:5678 (admin/password)"
echo " - Dashboard API: http://localhost:5005"
echo ""
echo "Next Steps:"
echo " 1. Open Dashboard: http://localhost:3000"
echo " 2. Open n8n: http://localhost:5678"
echo " 3. Import workflows from: implementation/workflows/"
echo " 4. Test manual trigger in Dashboard"
echo ""
echo "========================================"
echo ""

read -p "Open Dashboard in browser now? (y/n): " open_dashboard
if [ "$open_dashboard" = "y" ] || [ "$open_dashboard" = "Y" ]; then
    if command -v xdg-open &> /dev/null; then
        xdg-open http://localhost:3000
    elif command -v open &> /dev/null; then
        open http://localhost:3000
    else
        echo "Please open http://localhost:3000 in your browser"
    fi
fi

echo ""
echo "========================================"
echo -e "${GREEN}Setup Complete!${NC}"
echo "========================================"
echo ""
echo "View logs: $DOCKER_COMPOSE logs -f"
echo "Stop system: $DOCKER_COMPOSE down"
echo "Restart: $DOCKER_COMPOSE restart"
echo ""
echo "For help, see: START-HERE.md"
echo ""
