version: '3.8'

services:
  # MongoDB - Unstructured data storage
  mongodb:
    image: mongo:7.0
    container_name: ddn-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongodb_data:/data/db
    networks:
      - ddn-network
    restart: unless-stopped

  # PostgreSQL - Structured data storage
  postgres:
    image: postgres:16
    container_name: ddn-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=ddn_ai_analysis
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./implementation/postgresql_schema.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ddn-network
    restart: unless-stopped

  # n8n - Workflow automation
  n8n:
    image: n8nio/n8n:latest
    container_name: ddn-n8n
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=password
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=password
      - WEBHOOK_URL=http://localhost:5678/
    volumes:
      - n8n_data:/home/node/.n8n
      - ./implementation/workflows:/workflows
    networks:
      - ddn-network
    depends_on:
      - postgres
    restart: unless-stopped

  # LangGraph Classification Service
  langgraph-service:
    build:
      context: ./implementation
      dockerfile: Dockerfile
    container_name: ddn-langgraph
    ports:
      - "5000:5000"
    environment:
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/
      - MONGODB_DB=jenkins_failure_analysis
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_INDEX_NAME=test-failures
    networks:
      - ddn-network
    depends_on:
      - mongodb
    restart: unless-stopped
    command: python langgraph_agent.py

  # MongoDB MCP Server
  mcp-mongodb:
    build:
      context: ./mcp-configs
      dockerfile: Dockerfile
    container_name: ddn-mcp-mongodb
    ports:
      - "5001:5001"
    environment:
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/
      - MONGODB_DB=jenkins_failure_analysis
    networks:
      - ddn-network
    depends_on:
      - mongodb
    restart: unless-stopped
    command: python mcp_mongodb_server.py

  # GitHub MCP Server
  mcp-github:
    build:
      context: ./mcp-configs
      dockerfile: Dockerfile
    container_name: ddn-mcp-github
    ports:
      - "5002:5002"
    environment:
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_REPO=${GITHUB_REPO}
    networks:
      - ddn-network
    restart: unless-stopped
    command: python mcp_github_server.py

  # Pinecone Storage Service
  pinecone-service:
    build:
      context: ./mcp-configs
      dockerfile: Dockerfile
    container_name: ddn-pinecone
    ports:
      - "5003:5003"
    environment:
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_INDEX_NAME=test-failures
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    networks:
      - ddn-network
    restart: unless-stopped
    command: python pinecone_storage_service.py

  # Manual Trigger API
  manual-trigger-api:
    build:
      context: ./implementation
      dockerfile: Dockerfile
    container_name: ddn-manual-trigger
    ports:
      - "5004:5004"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=ddn_ai_analysis
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - N8N_WEBHOOK_URL=http://n8n:5678/webhook/ddn-test-failure
      - PINECONE_SERVICE_URL=http://pinecone-service:5003
    networks:
      - ddn-network
    depends_on:
      - postgres
    restart: unless-stopped
    command: python manual_trigger_api.py

  # Dashboard Backend API
  dashboard-api:
    build:
      context: ./implementation
      dockerfile: Dockerfile
    container_name: ddn-dashboard-api
    ports:
      - "5005:5005"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=ddn_ai_analysis
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/
      - MONGODB_DB=jenkins_failure_analysis
      - MANUAL_TRIGGER_API=http://manual-trigger-api:5004
    networks:
      - ddn-network
    depends_on:
      - postgres
      - mongodb
    restart: unless-stopped
    command: python dashboard_api.py

  # Jira Integration Service
  jira-service:
    build:
      context: ./implementation
      dockerfile: Dockerfile
    container_name: ddn-jira
    ports:
      - "5006:5006"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=ddn_ai_analysis
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - JIRA_URL=${JIRA_URL}
      - JIRA_EMAIL=${JIRA_EMAIL}
      - JIRA_API_TOKEN=${JIRA_API_TOKEN}
      - JIRA_PROJECT_KEY=${JIRA_PROJECT_KEY}
    networks:
      - ddn-network
    depends_on:
      - postgres
    restart: unless-stopped
    command: python jira_integration_service.py

  # Slack Integration Service
  slack-service:
    build:
      context: ./implementation
      dockerfile: Dockerfile
    container_name: ddn-slack
    ports:
      - "5007:5007"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=ddn_ai_analysis
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_SIGNING_SECRET=${SLACK_SIGNING_SECRET}
      - SLACK_DEFAULT_CHANNEL=${SLACK_DEFAULT_CHANNEL}
      - DASHBOARD_URL=http://localhost:3000
    networks:
      - ddn-network
    depends_on:
      - postgres
    restart: unless-stopped
    command: python slack_integration_service.py

  # Self-Healing Service
  self-healing-service:
    build:
      context: ./implementation
      dockerfile: Dockerfile
    container_name: ddn-self-healing
    ports:
      - "5008:5008"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=ddn_ai_analysis
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - JENKINS_URL=${JENKINS_URL}
      - JENKINS_USER=${JENKINS_USER}
      - JENKINS_TOKEN=${JENKINS_TOKEN}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_REPO=${GITHUB_REPO}
      - SELF_HEALING_SAFE_MODE=true
      - MIN_SUCCESS_RATE=0.8
      - MIN_PATTERN_OCCURRENCES=3
    networks:
      - ddn-network
    depends_on:
      - postgres
    restart: unless-stopped
    command: python self_healing_service.py

  # Dashboard Frontend (React)
  dashboard-ui:
    build:
      context: ./implementation/dashboard-ui
      dockerfile: Dockerfile
    container_name: ddn-dashboard-ui
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:5005
    networks:
      - ddn-network
    depends_on:
      - dashboard-api
    restart: unless-stopped

networks:
  ddn-network:
    driver: bridge

volumes:
  mongodb_data:
  postgres_data:
  n8n_data:
