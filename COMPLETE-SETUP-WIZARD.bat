@echo off
setlocal enabledelayedexpansion

:: ========================================
:: DDN AI System - Complete Setup Wizard
:: ========================================

color 0A
title DDN AI System - Complete Setup Wizard

echo.
echo ========================================
echo   DDN AI SYSTEM - COMPLETE SETUP
echo ========================================
echo.
echo This wizard will help you:
echo  1. Configure environment variables
echo  2. Test MongoDB Atlas connection
echo  3. Start all Docker services
echo  4. Import n8n workflows
echo  5. Test the complete system
echo.
echo ========================================
echo.

:: Check prerequisites
echo [STEP 1/6] Checking prerequisites...
echo.

:: Check Docker
where docker >nul 2>&1
if %errorlevel% neq 0 (
    echo [X] Docker not found!
    echo Please install Docker Desktop from: https://www.docker.com/products/docker-desktop
    pause
    exit /b 1
)
echo [OK] Docker installed

:: Check Docker Compose
where docker-compose >nul 2>&1
if %errorlevel% neq 0 (
    docker compose version >nul 2>&1
    if !errorlevel! neq 0 (
        echo [X] Docker Compose not found!
        pause
        exit /b 1
    )
    set DOCKER_COMPOSE=docker compose
) else (
    set DOCKER_COMPOSE=docker-compose
)
echo [OK] Docker Compose available

:: Check Python
where python >nul 2>&1
if %errorlevel% neq 0 (
    echo [!] Python not found - Some features may not work
) else (
    echo [OK] Python installed
)

:: Check Git
where git >nul 2>&1
if %errorlevel% neq 0 (
    echo [!] Git not found - GitHub features disabled
) else (
    echo [OK] Git installed
)

echo.
pause

:: Configure Environment
echo.
echo ========================================
echo [STEP 2/6] Environment Configuration
echo ========================================
echo.

if exist .env (
    echo .env file already exists.
    echo.
    choice /C YN /M "Do you want to reconfigure it"
    if !errorlevel! equ 1 (
        goto :configure_env
    ) else (
        echo Using existing .env file
        goto :test_mongodb
    )
) else (
    goto :configure_env
)

:configure_env
echo.
echo Creating .env file...
echo.
echo Please provide the following information:
echo (Press Enter to skip optional items)
echo.

:: MongoDB Atlas
echo --- MongoDB Atlas Configuration ---
set /p MONGODB_URI="MongoDB Atlas Connection String: "
if "!MONGODB_URI!"=="" (
    echo Using local MongoDB (will start with Docker)
    set MONGODB_URI=mongodb://admin:password@mongodb:27017/
)

:: Anthropic API Key
echo.
echo --- AI API Keys (Required) ---
set /p ANTHROPIC_API_KEY="Anthropic API Key (from console.anthropic.com): "
if "!ANTHROPIC_API_KEY!"=="" (
    echo WARNING: Anthropic API key is required for AI analysis!
)

:: OpenAI API Key
set /p OPENAI_API_KEY="OpenAI API Key (from platform.openai.com): "
if "!OPENAI_API_KEY!"=="" (
    echo WARNING: OpenAI API key is required for embeddings!
)

:: Pinecone API Key
set /p PINECONE_API_KEY="Pinecone API Key (from pinecone.io): "
if "!PINECONE_API_KEY!"=="" (
    echo WARNING: Pinecone API key is required for RAG!
)

:: GitHub Token (Optional)
echo.
echo --- GitHub Integration (Optional) ---
set /p GITHUB_TOKEN="GitHub Personal Access Token: "
set /p GITHUB_REPO="GitHub Repository (e.g., username/repo): "

:: Create .env file
echo.
echo Creating .env file...
(
echo # DDN AI Test Failure Analysis System - Environment Variables
echo # Generated by Setup Wizard on %date% %time%
echo.
echo # ===================== MongoDB Configuration =====================
echo MONGODB_URI=!MONGODB_URI!
echo MONGODB_DB=jenkins_failure_analysis
echo.
echo # ===================== AI ^& ML APIs =====================
echo ANTHROPIC_API_KEY=!ANTHROPIC_API_KEY!
echo OPENAI_API_KEY=!OPENAI_API_KEY!
echo PINECONE_API_KEY=!PINECONE_API_KEY!
echo PINECONE_INDEX_NAME=test-failures
echo.
echo # ===================== GitHub =====================
echo GITHUB_TOKEN=!GITHUB_TOKEN!
echo GITHUB_REPO=!GITHUB_REPO!
echo.
echo # ===================== Jenkins =====================
echo JENKINS_URL=http://localhost:8080
echo JENKINS_USER=admin
echo JENKINS_TOKEN=
echo.
echo # ===================== Self-Healing =====================
echo SELF_HEALING_SAFE_MODE=true
echo MIN_SUCCESS_RATE=0.8
echo MIN_PATTERN_OCCURRENCES=3
) > .env

echo [OK] .env file created!
echo.

:test_mongodb
echo.
echo ========================================
echo [STEP 3/6] Testing MongoDB Connection
echo ========================================
echo.

:: Test MongoDB Atlas if connection string is provided
if exist test-mongodb-atlas.py (
    if not "!MONGODB_URI!"=="mongodb://admin:password@mongodb:27017/" (
        echo Testing MongoDB Atlas connection...
        python test-mongodb-atlas.py
        if !errorlevel! neq 0 (
            echo.
            echo [!] MongoDB Atlas connection failed
            echo You can continue with local MongoDB or fix the connection
            echo.
            choice /C YN /M "Continue anyway"
            if !errorlevel! equ 2 exit /b 1
        )
    ) else (
        echo Using local MongoDB (will start with Docker)
    )
) else (
    echo [!] MongoDB test script not found
)

echo.
pause

:: Stop existing services
echo.
echo ========================================
echo [STEP 4/6] Preparing Docker Services
echo ========================================
echo.

echo Stopping any existing services...
%DOCKER_COMPOSE% down >nul 2>&1
echo [OK] Cleaned up

echo.
echo Building Docker images...
%DOCKER_COMPOSE% build
if !errorlevel! neq 0 (
    echo [X] Docker build failed!
    pause
    exit /b 1
)
echo [OK] Images built

echo.
pause

:: Start services
echo.
echo ========================================
echo [STEP 5/6] Starting All Services
echo ========================================
echo.

echo Starting Docker Compose services...
echo This may take 3-5 minutes...
echo.

%DOCKER_COMPOSE% up -d

if !errorlevel! neq 0 (
    echo [X] Failed to start services!
    echo.
    echo Checking logs...
    %DOCKER_COMPOSE% logs --tail=50
    pause
    exit /b 1
)

echo [OK] Services started
echo.

echo Waiting for services to initialize (30 seconds)...
timeout /t 30 /nobreak >nul

:: Health checks
echo.
echo Performing health checks...
echo.

curl -s http://localhost:3000 >nul 2>&1
if !errorlevel! equ 0 (
    echo [OK] Dashboard UI running on http://localhost:3000
) else (
    echo [!] Dashboard UI not responding
)

curl -s http://localhost:5005/health >nul 2>&1
if !errorlevel! equ 0 (
    echo [OK] Dashboard API running on http://localhost:5005
) else (
    echo [!] Dashboard API not responding
)

curl -s http://localhost:5678 >nul 2>&1
if !errorlevel! equ 0 (
    echo [OK] n8n running on http://localhost:5678
) else (
    echo [!] n8n not responding
)

echo.
pause

:: Final steps
echo.
echo ========================================
echo [STEP 6/6] System Ready!
echo ========================================
echo.
echo Your DDN AI System is now running!
echo.
echo Access Points:
echo  - Dashboard UI:  http://localhost:3000
echo  - n8n Workflows: http://localhost:5678 (admin/password)
echo  - Dashboard API: http://localhost:5005
echo.
echo Next Steps:
echo  1. Open Dashboard: http://localhost:3000
echo  2. Open n8n: http://localhost:5678
echo  3. Import workflows from: implementation\workflows\
echo  4. Test manual trigger in Dashboard
echo.
echo ========================================
echo.

choice /C YN /M "Open Dashboard in browser now"
if !errorlevel! equ 1 (
    start http://localhost:3000
)

choice /C YN /M "Open n8n in browser now"
if !errorlevel! equ 1 (
    start http://localhost:5678
)

echo.
echo ========================================
echo Setup Complete!
echo ========================================
echo.
echo View logs: %DOCKER_COMPOSE% logs -f
echo Stop system: %DOCKER_COMPOSE% down
echo Restart: %DOCKER_COMPOSE% restart
echo.
echo For help, see: START-HERE.md
echo.
pause
